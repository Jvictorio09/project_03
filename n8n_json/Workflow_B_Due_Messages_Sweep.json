{
  "name": "Workflow B: Due Messages Sweep",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 2
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Cron Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "={{ $vars.djangoBaseUrl }}/webhook/n8n/due-messages/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "fetch-due-messages",
      "name": "Fetch Due Messages",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-messages",
              "leftValue": "={{ $json.messages && $json.messages.length > 0 }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-has-messages",
      "name": "Has Messages?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "functionBody": "// Process each due message by calling Workflow A\nconst messages = $input.first().json.messages || [];\nconst results = [];\n\nfor (const message of messages) {\n  try {\n    // Call Workflow A webhook for each message\n    const payload = {\n      message_log_id: message.message_log_id,\n      campaign_id: message.campaign_id,\n      step_id: message.step_id,\n      lead_id: message.lead_id,\n      organization_id: message.organization_id,\n      send_at: message.send_at,\n      request_id: message.request_id,\n      created_at: message.created_at\n    };\n    \n    results.push({\n      message: payload,\n      queued: true\n    });\n  } catch (error) {\n    results.push({\n      message: message,\n      queued: false,\n      error: error.message\n    });\n  }\n}\n\nreturn results;"
      },
      "id": "process-messages",
      "name": "Process Messages",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "url": "={{ $vars.workflowAWebhookUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Timestamp",
              "value": "={{ Math.floor(Date.now() / 1000) }}"
            },
            {
              "name": "X-Signature",
              "value": "={{ 'sha256=' + require('crypto').createHmac('sha256', $vars.n8nHmacSecret).update(Math.floor(Date.now() / 1000) + '.' + JSON.stringify($json.message)).digest('hex') }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message_log_id",
              "value": "={{ $json.message.message_log_id }}"
            },
            {
              "name": "campaign_id",
              "value": "={{ $json.message.campaign_id }}"
            },
            {
              "name": "step_id",
              "value": "={{ $json.message.step_id }}"
            },
            {
              "name": "lead_id",
              "value": "={{ $json.message.lead_id }}"
            },
            {
              "name": "organization_id",
              "value": "={{ $json.message.organization_id }}"
            },
            {
              "name": "send_at",
              "value": "={{ $json.message.send_at }}"
            },
            {
              "name": "request_id",
              "value": "={{ $json.message.request_id }}"
            },
            {
              "name": "created_at",
              "value": "={{ $json.message.created_at }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "queue-to-workflow-a",
      "name": "Queue to Workflow A",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "functionBody": "// Log sweep results\nconst results = $input.all();\nconst successful = results.filter(r => r.json.queued).length;\nconst failed = results.filter(r => !r.json.queued).length;\n\nconsole.log(`Sweep completed: ${successful} queued, ${failed} failed`);\n\nreturn {\n  sweep_completed: true,\n  queued_count: successful,\n  failed_count: failed,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "log-results",
      "name": "Log Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "functionBody": "// No messages to process\nreturn {\n  sweep_completed: true,\n  queued_count: 0,\n  failed_count: 0,\n  message: 'No due messages found',\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "no-messages",
      "name": "No Messages",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 400]
    }
  ],
  "connections": {
    "Cron Trigger": {
      "main": [
        [
          {
            "node": "Fetch Due Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Due Messages": {
      "main": [
        [
          {
            "node": "Has Messages?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Messages?": {
      "main": [
        [
          {
            "node": "Process Messages",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Messages": {
      "main": [
        [
          {
            "node": "Queue to Workflow A",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Queue to Workflow A": {
      "main": [
        [
          {
            "node": "Log Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-01-27T12:00:00.000Z",
  "versionId": "1"
}
